//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class F_SocketClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(F_SocketClient), typeof(System.Object));
		L.RegFunction("OnRemove", OnRemove);
		L.RegFunction("ConnectServer", ConnectServer);
		L.RegFunction("Close", Close);
		L.RegFunction("SendMessageWithPB", SendMessageWithPB);
		L.RegFunction("SendMessageWithNotPB", SendMessageWithNotPB);
		L.RegFunction("New", _CreateF_SocketClient);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("loggedIn", get_loggedIn, set_loggedIn);
		L.RegVar("id", get_id, set_id);
		L.RegVar("logicID", get_logicID, set_logicID);
		L.RegVar("send_To", get_send_To, set_send_To);
		L.RegVar("send_Mcmd", get_send_Mcmd, set_send_Mcmd);
		L.RegVar("send_From", get_send_From, set_send_From);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateF_SocketClient(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				short arg4 = (short)LuaDLL.luaL_checknumber(L, 5);
				F_SocketClient obj = new F_SocketClient(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: F_SocketClient.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRemove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
			obj.OnRemove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.ConnectServer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessageWithPB(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
				short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
				LuaByteBuffer arg1 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 3));
				obj.SendMessageWithPB(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
				short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
				short arg1 = (short)LuaDLL.luaL_checknumber(L, 3);
				LuaByteBuffer arg2 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 4));
				obj.SendMessageWithPB(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: F_SocketClient.SendMessageWithPB");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMessageWithNotPB(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
				short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
				obj.SendMessageWithNotPB(arg0);
				return 0;
			}
			else if (count == 3)
			{
				F_SocketClient obj = (F_SocketClient)ToLua.CheckObject<F_SocketClient>(L, 1);
				short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
				short arg1 = (short)LuaDLL.luaL_checknumber(L, 3);
				obj.SendMessageWithNotPB(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: F_SocketClient.SendMessageWithNotPB");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loggedIn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			bool ret = obj.loggedIn;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loggedIn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logicID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int ret = obj.logicID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logicID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_send_To(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int ret = obj.send_To;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_To on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_send_Mcmd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			short ret = obj.send_Mcmd;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_Mcmd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_send_From(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int ret = obj.send_From;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_From on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loggedIn(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.loggedIn = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loggedIn on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logicID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.logicID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logicID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_send_To(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.send_To = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_To on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_send_Mcmd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.send_Mcmd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_Mcmd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_send_From(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SocketClient obj = (F_SocketClient)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.send_From = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index send_From on a nil value");
		}
	}
}

