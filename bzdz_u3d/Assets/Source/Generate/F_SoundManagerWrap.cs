//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class F_SoundManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(F_SoundManager), typeof(F_Singleton<F_SoundManager>));
		L.RegFunction("Run", Run);
		L.RegFunction("Add", Add);
		L.RegFunction("Remove", Remove);
		L.RegFunction("PlayEffectWithVolume", PlayEffectWithVolume);
		L.RegFunction("PlayEffect", PlayEffect);
		L.RegFunction("StopPlayEffect", StopPlayEffect);
		L.RegFunction("SetBackSoundTrack", SetBackSoundTrack);
		L.RegFunction("SetMusicVolume", SetMusicVolume);
		L.RegFunction("OpenMusicVolume", OpenMusicVolume);
		L.RegFunction("CloseMusicVolume", CloseMusicVolume);
		L.RegFunction("SetEffVolume", SetEffVolume);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("effPoint", get_effPoint, set_effPoint);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Run(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			obj.Run();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.AudioClip arg1 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 3, typeof(UnityEngine.AudioClip));
			obj.Add(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Remove(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayEffectWithVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.PlayEffectWithVolume(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayEffect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayEffect(arg0);
				return 0;
			}
			else if (count == 3)
			{
				F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.PlayEffect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: F_SoundManager.PlayEffect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopPlayEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			obj.StopPlayEffect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBackSoundTrack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.SetBackSoundTrack(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMusicVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetMusicVolume(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenMusicVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			obj.OpenMusicVolume();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseMusicVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			obj.CloseMusicVolume();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEffVolume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			F_SoundManager obj = (F_SoundManager)ToLua.CheckObject<F_SoundManager>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetEffVolume(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_effPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SoundManager obj = (F_SoundManager)o;
			UnityEngine.Vector3 ret = obj.effPoint;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index effPoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_effPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			F_SoundManager obj = (F_SoundManager)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.effPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index effPoint on a nil value");
		}
	}
}

