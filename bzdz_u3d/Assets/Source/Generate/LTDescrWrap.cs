//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LTDescrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LTDescr), typeof(System.Object));
		L.RegFunction("ToString", ToString);
		L.RegFunction("reset", reset);
		L.RegFunction("setMoveX", setMoveX);
		L.RegFunction("setMoveY", setMoveY);
		L.RegFunction("setMoveZ", setMoveZ);
		L.RegFunction("setMoveLocalX", setMoveLocalX);
		L.RegFunction("setMoveLocalY", setMoveLocalY);
		L.RegFunction("setMoveLocalZ", setMoveLocalZ);
		L.RegFunction("setMoveCurved", setMoveCurved);
		L.RegFunction("setMoveCurvedLocal", setMoveCurvedLocal);
		L.RegFunction("setMoveSpline", setMoveSpline);
		L.RegFunction("setMoveSplineLocal", setMoveSplineLocal);
		L.RegFunction("setScaleX", setScaleX);
		L.RegFunction("setScaleY", setScaleY);
		L.RegFunction("setScaleZ", setScaleZ);
		L.RegFunction("setRotateX", setRotateX);
		L.RegFunction("setRotateY", setRotateY);
		L.RegFunction("setRotateZ", setRotateZ);
		L.RegFunction("setRotateAround", setRotateAround);
		L.RegFunction("setRotateAroundLocal", setRotateAroundLocal);
		L.RegFunction("setAlpha", setAlpha);
		L.RegFunction("setTextAlpha", setTextAlpha);
		L.RegFunction("setAlphaVertex", setAlphaVertex);
		L.RegFunction("setColor", setColor);
		L.RegFunction("setCallbackColor", setCallbackColor);
		L.RegFunction("setTextColor", setTextColor);
		L.RegFunction("setCanvasAlpha", setCanvasAlpha);
		L.RegFunction("setCanvasGroupAlpha", setCanvasGroupAlpha);
		L.RegFunction("setCanvasColor", setCanvasColor);
		L.RegFunction("setCanvasMoveX", setCanvasMoveX);
		L.RegFunction("setCanvasMoveY", setCanvasMoveY);
		L.RegFunction("setCanvasMoveZ", setCanvasMoveZ);
		L.RegFunction("setCanvasRotateAround", setCanvasRotateAround);
		L.RegFunction("setCanvasRotateAroundLocal", setCanvasRotateAroundLocal);
		L.RegFunction("setCanvasPlaySprite", setCanvasPlaySprite);
		L.RegFunction("setCanvasMove", setCanvasMove);
		L.RegFunction("setCanvasScale", setCanvasScale);
		L.RegFunction("setCanvasSizeDelta", setCanvasSizeDelta);
		L.RegFunction("setCallback", setCallback);
		L.RegFunction("setValue3", setValue3);
		L.RegFunction("setMove", setMove);
		L.RegFunction("setMoveLocal", setMoveLocal);
		L.RegFunction("setMoveToTransform", setMoveToTransform);
		L.RegFunction("setRotate", setRotate);
		L.RegFunction("setRotateLocal", setRotateLocal);
		L.RegFunction("setScale", setScale);
		L.RegFunction("setGUIMove", setGUIMove);
		L.RegFunction("setGUIMoveMargin", setGUIMoveMargin);
		L.RegFunction("setGUIScale", setGUIScale);
		L.RegFunction("setGUIAlpha", setGUIAlpha);
		L.RegFunction("setGUIRotate", setGUIRotate);
		L.RegFunction("setDelayedSound", setDelayedSound);
		L.RegFunction("updateNow", updateNow);
		L.RegFunction("updateInternal", updateInternal);
		L.RegFunction("callOnCompletes", callOnCompletes);
		L.RegFunction("setFromColor", setFromColor);
		L.RegFunction("pause", pause);
		L.RegFunction("resume", resume);
		L.RegFunction("setAxis", setAxis);
		L.RegFunction("setDelay", setDelay);
		L.RegFunction("setEase", setEase);
		L.RegFunction("setEaseLinear", setEaseLinear);
		L.RegFunction("setEaseSpring", setEaseSpring);
		L.RegFunction("setEaseInQuad", setEaseInQuad);
		L.RegFunction("setEaseOutQuad", setEaseOutQuad);
		L.RegFunction("setEaseInOutQuad", setEaseInOutQuad);
		L.RegFunction("setEaseInCubic", setEaseInCubic);
		L.RegFunction("setEaseOutCubic", setEaseOutCubic);
		L.RegFunction("setEaseInOutCubic", setEaseInOutCubic);
		L.RegFunction("setEaseInQuart", setEaseInQuart);
		L.RegFunction("setEaseOutQuart", setEaseOutQuart);
		L.RegFunction("setEaseInOutQuart", setEaseInOutQuart);
		L.RegFunction("setEaseInQuint", setEaseInQuint);
		L.RegFunction("setEaseOutQuint", setEaseOutQuint);
		L.RegFunction("setEaseInOutQuint", setEaseInOutQuint);
		L.RegFunction("setEaseInSine", setEaseInSine);
		L.RegFunction("setEaseOutSine", setEaseOutSine);
		L.RegFunction("setEaseInOutSine", setEaseInOutSine);
		L.RegFunction("setEaseInExpo", setEaseInExpo);
		L.RegFunction("setEaseOutExpo", setEaseOutExpo);
		L.RegFunction("setEaseInOutExpo", setEaseInOutExpo);
		L.RegFunction("setEaseInCirc", setEaseInCirc);
		L.RegFunction("setEaseOutCirc", setEaseOutCirc);
		L.RegFunction("setEaseInOutCirc", setEaseInOutCirc);
		L.RegFunction("setEaseInBounce", setEaseInBounce);
		L.RegFunction("setEaseOutBounce", setEaseOutBounce);
		L.RegFunction("setEaseInOutBounce", setEaseInOutBounce);
		L.RegFunction("setEaseInBack", setEaseInBack);
		L.RegFunction("setEaseOutBack", setEaseOutBack);
		L.RegFunction("setEaseInOutBack", setEaseInOutBack);
		L.RegFunction("setEaseInElastic", setEaseInElastic);
		L.RegFunction("setEaseOutElastic", setEaseOutElastic);
		L.RegFunction("setEaseInOutElastic", setEaseInOutElastic);
		L.RegFunction("setEasePunch", setEasePunch);
		L.RegFunction("setEaseShake", setEaseShake);
		L.RegFunction("setOvershoot", setOvershoot);
		L.RegFunction("setPeriod", setPeriod);
		L.RegFunction("setTo", setTo);
		L.RegFunction("setFrom", setFrom);
		L.RegFunction("setDiff", setDiff);
		L.RegFunction("setHasInitialized", setHasInitialized);
		L.RegFunction("setId", setId);
		L.RegFunction("setPassed", setPassed);
		L.RegFunction("setTime", setTime);
		L.RegFunction("setSpeed", setSpeed);
		L.RegFunction("setRepeat", setRepeat);
		L.RegFunction("setLoopType", setLoopType);
		L.RegFunction("setUseEstimatedTime", setUseEstimatedTime);
		L.RegFunction("setIgnoreTimeScale", setIgnoreTimeScale);
		L.RegFunction("setUseFrames", setUseFrames);
		L.RegFunction("setUseManualTime", setUseManualTime);
		L.RegFunction("setLoopCount", setLoopCount);
		L.RegFunction("setLoopOnce", setLoopOnce);
		L.RegFunction("setLoopClamp", setLoopClamp);
		L.RegFunction("setLoopPingPong", setLoopPingPong);
		L.RegFunction("setOnComplete", setOnComplete);
		L.RegFunction("setOnCompleteParam", setOnCompleteParam);
		L.RegFunction("setOnUpdate", setOnUpdate);
		L.RegFunction("setOnUpdateRatio", setOnUpdateRatio);
		L.RegFunction("setOnUpdateObject", setOnUpdateObject);
		L.RegFunction("setOnUpdateVector2", setOnUpdateVector2);
		L.RegFunction("setOnUpdateVector3", setOnUpdateVector3);
		L.RegFunction("setOnUpdateColor", setOnUpdateColor);
		L.RegFunction("setOnUpdateParam", setOnUpdateParam);
		L.RegFunction("setOrientToPath", setOrientToPath);
		L.RegFunction("setOrientToPath2d", setOrientToPath2d);
		L.RegFunction("setRect", setRect);
		L.RegFunction("setPath", setPath);
		L.RegFunction("setPoint", setPoint);
		L.RegFunction("setDestroyOnComplete", setDestroyOnComplete);
		L.RegFunction("setAudio", setAudio);
		L.RegFunction("setOnCompleteOnRepeat", setOnCompleteOnRepeat);
		L.RegFunction("setOnCompleteOnStart", setOnCompleteOnStart);
		L.RegFunction("setSprites", setSprites);
		L.RegFunction("setFrameRate", setFrameRate);
		L.RegFunction("setOnStart", setOnStart);
		L.RegFunction("setDirection", setDirection);
		L.RegFunction("setRecursive", setRecursive);
		L.RegFunction("New", _CreateLTDescr);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("toggle", get_toggle, set_toggle);
		L.RegVar("useEstimatedTime", get_useEstimatedTime, set_useEstimatedTime);
		L.RegVar("useFrames", get_useFrames, set_useFrames);
		L.RegVar("useManualTime", get_useManualTime, set_useManualTime);
		L.RegVar("usesNormalDt", get_usesNormalDt, set_usesNormalDt);
		L.RegVar("hasInitiliazed", get_hasInitiliazed, set_hasInitiliazed);
		L.RegVar("hasExtraOnCompletes", get_hasExtraOnCompletes, set_hasExtraOnCompletes);
		L.RegVar("hasPhysics", get_hasPhysics, set_hasPhysics);
		L.RegVar("onCompleteOnRepeat", get_onCompleteOnRepeat, set_onCompleteOnRepeat);
		L.RegVar("onCompleteOnStart", get_onCompleteOnStart, set_onCompleteOnStart);
		L.RegVar("useRecursion", get_useRecursion, set_useRecursion);
		L.RegVar("ratioPassed", get_ratioPassed, set_ratioPassed);
		L.RegVar("passed", get_passed, set_passed);
		L.RegVar("delay", get_delay, set_delay);
		L.RegVar("time", get_time, set_time);
		L.RegVar("speed", get_speed, set_speed);
		L.RegVar("lastVal", get_lastVal, set_lastVal);
		L.RegVar("loopCount", get_loopCount, set_loopCount);
		L.RegVar("counter", get_counter, set_counter);
		L.RegVar("direction", get_direction, set_direction);
		L.RegVar("directionLast", get_directionLast, set_directionLast);
		L.RegVar("overshoot", get_overshoot, set_overshoot);
		L.RegVar("period", get_period, set_period);
		L.RegVar("scale", get_scale, set_scale);
		L.RegVar("destroyOnComplete", get_destroyOnComplete, set_destroyOnComplete);
		L.RegVar("trans", get_trans, set_trans);
		L.RegVar("ltRect", get_ltRect, set_ltRect);
		L.RegVar("type", get_type, set_type);
		L.RegVar("loopType", get_loopType, set_loopType);
		L.RegVar("hasUpdateCallback", get_hasUpdateCallback, set_hasUpdateCallback);
		L.RegVar("easeMethod", get_easeMethod, set_easeMethod);
		L.RegVar("spriteRen", get_spriteRen, set_spriteRen);
		L.RegVar("rectTransform", get_rectTransform, set_rectTransform);
		L.RegVar("uiText", get_uiText, set_uiText);
		L.RegVar("uiImage", get_uiImage, set_uiImage);
		L.RegVar("rawImage", get_rawImage, set_rawImage);
		L.RegVar("sprites", get_sprites, set_sprites);
		L.RegVar("_optional", get__optional, set__optional);
		L.RegVar("val", get_val, set_val);
		L.RegVar("dt", get_dt, set_dt);
		L.RegVar("newVect", get_newVect, set_newVect);
		L.RegVar("from", get_from, set_from);
		L.RegVar("to", get_to, set_to);
		L.RegVar("easeInternal", get_easeInternal, set_easeInternal);
		L.RegVar("initInternal", get_initInternal, set_initInternal);
		L.RegVar("uniqueId", get_uniqueId, null);
		L.RegVar("id", get_id, null);
		L.RegVar("optional", get_optional, set_optional);
		L.RegFunction("EaseTypeDelegate", LTDescr_EaseTypeDelegate);
		L.RegFunction("ActionMethodDelegate", LTDescr_ActionMethodDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLTDescr(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LTDescr obj = new LTDescr();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LTDescr.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			obj.reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveX();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveY();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveZ();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveLocalX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveLocalX();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveLocalY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveLocalY();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveLocalZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveLocalZ();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveCurved(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveCurved();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveCurvedLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveCurvedLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveSpline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveSpline();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveSplineLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveSplineLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setScaleX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setScaleX();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setScaleY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setScaleY();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setScaleZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setScaleZ();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateX();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateY();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateZ();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateAround(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateAround();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateAroundLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateAroundLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setAlpha();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTextAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setTextAlpha();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAlphaVertex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setAlphaVertex();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setColor();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCallbackColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCallbackColor();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTextColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setTextColor();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasAlpha();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasGroupAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasGroupAlpha();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasColor();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasMoveX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasMoveX();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasMoveY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasMoveY();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasMoveZ(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasMoveZ();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasRotateAround(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasRotateAround();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasRotateAroundLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasRotateAroundLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasPlaySprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasPlaySprite();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasMove();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasScale();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCanvasSizeDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCanvasSizeDelta();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCallback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setCallback();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setValue3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setValue3();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMove();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMoveToTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setMoveToTransform();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotate();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRotateLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setRotateLocal();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setScale(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				LTDescr o = obj.setScale();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				LTDescr o = obj.setScale(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setScale");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setGUIMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setGUIMove();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setGUIMoveMargin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setGUIMoveMargin();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setGUIScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setGUIScale();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setGUIAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setGUIAlpha();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setGUIRotate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setGUIRotate();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDelayedSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setDelayedSound();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int updateNow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.updateNow();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int updateInternal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool o = obj.updateInternal();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int callOnCompletes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			obj.callOnCompletes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFromColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			LTDescr o = obj.setFromColor(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.pause();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int resume(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.resume();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAxis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setAxis(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDelay(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setDelay(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<LeanTweenType>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				LeanTweenType arg0 = (LeanTweenType)ToLua.ToObject(L, 2);
				LTDescr o = obj.setEase(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.AnimationCurve>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.ToObject(L, 2);
				LTDescr o = obj.setEase(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setEase");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseLinear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseLinear();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseSpring(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseSpring();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInQuad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInQuad();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutQuad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutQuad();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutQuad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutQuad();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInCubic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInCubic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutCubic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutCubic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutCubic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutCubic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInQuart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInQuart();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutQuart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutQuart();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutQuart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutQuart();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInQuint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInQuint();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutQuint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutQuint();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutQuint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutQuint();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInSine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInSine();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutSine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutSine();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutSine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutSine();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInExpo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInExpo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutExpo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutExpo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutExpo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutExpo();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInCirc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInCirc();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutCirc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutCirc();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutCirc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutCirc();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInBounce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInBounce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutBounce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutBounce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutBounce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutBounce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInBack();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutBack();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutBack();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInElastic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInElastic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseOutElastic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseOutElastic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseInOutElastic(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseInOutElastic();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEasePunch(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEasePunch();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setEaseShake(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setEaseShake();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOvershoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setOvershoot(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPeriod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setPeriod(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				LTDescr o = obj.setTo(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Transform>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				LTDescr o = obj.setTo(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setTo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFrom(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<float>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				LTDescr o = obj.setFrom(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				LTDescr o = obj.setFrom(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setFrom");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDiff(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setDiff(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setHasInitialized(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setHasInitialized(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setId(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPassed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setPassed(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSpeed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setSpeed(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRepeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setRepeat(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LeanTweenType arg0 = (LeanTweenType)ToLua.CheckObject(L, 2, typeof(LeanTweenType));
			LTDescr o = obj.setLoopType(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseEstimatedTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseEstimatedTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setIgnoreTimeScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setIgnoreTimeScale(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseFrames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseFrames(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setUseManualTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setUseManualTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setLoopCount(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopOnce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTDescr o = obj.setLoopOnce();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopClamp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				LTDescr o = obj.setLoopClamp();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				LTDescr o = obj.setLoopClamp(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setLoopClamp");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLoopPingPong(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				LTDescr o = obj.setLoopPingPong();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				LTDescr o = obj.setLoopPingPong(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setLoopPingPong");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnComplete(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action arg0 = (System.Action)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnComplete(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<object>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<object> arg0 = (System.Action<object>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnComplete(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<object> arg0 = (System.Action<object>)ToLua.CheckDelegate<System.Action<object>>(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnComplete(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setOnComplete");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setOnCompleteParam(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action<float>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<float> arg0 = (System.Action<float>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Color>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Color> arg0 = (System.Action<UnityEngine.Color>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Color,object>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Color,object> arg0 = (System.Action<UnityEngine.Color,object>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<float,object>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<float,object> arg0 = (System.Action<float,object>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector3,object>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector3,object> arg0 = (System.Action<UnityEngine.Vector3,object>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector2>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector2> arg0 = (System.Action<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector3>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector3> arg0 = (System.Action<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Action<float,object>, object>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<float,object> arg0 = (System.Action<float,object>)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector3,object>, object>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector3,object> arg0 = (System.Action<UnityEngine.Vector3,object>)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector2>, object>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector2> arg0 = (System.Action<UnityEngine.Vector2>)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<System.Action<UnityEngine.Vector3>, object>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Vector3> arg0 = (System.Action<UnityEngine.Vector3>)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				LTDescr o = obj.setOnUpdate(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setOnUpdate");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateRatio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			System.Action<float,float> arg0 = (System.Action<float,float>)ToLua.CheckDelegate<System.Action<float,float>>(L, 2);
			LTDescr o = obj.setOnUpdateRatio(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			System.Action<float,object> arg0 = (System.Action<float,object>)ToLua.CheckDelegate<System.Action<float,object>>(L, 2);
			LTDescr o = obj.setOnUpdateObject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			System.Action<UnityEngine.Vector2> arg0 = (System.Action<UnityEngine.Vector2>)ToLua.CheckDelegate<System.Action<UnityEngine.Vector2>>(L, 2);
			LTDescr o = obj.setOnUpdateVector2(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			System.Action<UnityEngine.Vector3> arg0 = (System.Action<UnityEngine.Vector3>)ToLua.CheckDelegate<System.Action<UnityEngine.Vector3>>(L, 2);
			LTDescr o = obj.setOnUpdateVector3(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Color>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Color> arg0 = (System.Action<UnityEngine.Color>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdateColor(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.Action<UnityEngine.Color,object>>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				System.Action<UnityEngine.Color,object> arg0 = (System.Action<UnityEngine.Color,object>)ToLua.ToObject(L, 2);
				LTDescr o = obj.setOnUpdateColor(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setOnUpdateColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnUpdateParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setOnUpdateParam(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOrientToPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOrientToPath(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOrientToPath2d(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOrientToPath2d(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<LTRect>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				LTRect arg0 = (LTRect)ToLua.ToObject(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Rect>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.Rect arg0 = StackTraits<UnityEngine.Rect>.To(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.RectTransform>(L, 2))
			{
				LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
				UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.ToObject(L, 2);
				LTDescr o = obj.setRect(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LTDescr.setRect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			LTBezierPath arg0 = (LTBezierPath)ToLua.CheckObject<LTBezierPath>(L, 2);
			LTDescr o = obj.setPath(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr o = obj.setPoint(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDestroyOnComplete(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setDestroyOnComplete(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAudio(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			LTDescr o = obj.setAudio(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteOnRepeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOnCompleteOnRepeat(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnCompleteOnStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setOnCompleteOnStart(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setSprites(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
			LTDescr o = obj.setSprites(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setFrameRate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setFrameRate(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOnStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			LTDescr o = obj.setOnStart(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr o = obj.setDirection(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRecursive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LTDescr obj = (LTDescr)ToLua.CheckObject<LTDescr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			LTDescr o = obj.setRecursive(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_toggle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.toggle;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index toggle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useEstimatedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.useEstimatedTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useEstimatedTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.useFrames;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFrames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useManualTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.useManualTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useManualTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usesNormalDt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.usesNormalDt;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index usesNormalDt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasInitiliazed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.hasInitiliazed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasInitiliazed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasExtraOnCompletes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.hasExtraOnCompletes;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasExtraOnCompletes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasPhysics(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.hasPhysics;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasPhysics on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteOnRepeat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.onCompleteOnRepeat;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCompleteOnRepeat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCompleteOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.onCompleteOnStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCompleteOnStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useRecursion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.useRecursion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useRecursion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ratioPassed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.ratioPassed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ratioPassed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.passed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index passed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_delay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.delay;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index delay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.time;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index time on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lastVal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.lastVal;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastVal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loopCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			int ret = obj.loopCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_counter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			uint ret = obj.counter;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index counter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_direction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.direction;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index direction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_directionLast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.directionLast;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index directionLast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_overshoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.overshoot;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index overshoot on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_period(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.period;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index period on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float ret = obj.scale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_destroyOnComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.destroyOnComplete;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index destroyOnComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_trans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Transform ret = obj.trans;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index trans on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ltRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTRect ret = obj.ltRect;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ltRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			TweenAction ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LeanTweenType ret = obj.loopType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasUpdateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool ret = obj.hasUpdateCallback;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasUpdateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.EaseTypeDelegate ret = obj.easeMethod;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeMethod on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spriteRen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.SpriteRenderer ret = obj.spriteRen;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteRen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.RectTransform ret = obj.rectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.Text ret = obj.uiText;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiText on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uiImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.Image ret = obj.uiImage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiImage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rawImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.RawImage ret = obj.rawImage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rawImage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Sprite[] ret = obj.sprites;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sprites on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__optional(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescrOptional ret = obj._optional;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _optional on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_val(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, LTDescr.val);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dt(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, LTDescr.dt);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_newVect(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LTDescr.newVect);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_from(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Vector3 ret = obj.from;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index from on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_to(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Vector3 ret = obj.to;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index to on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easeInternal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.ActionMethodDelegate ret = obj.easeInternal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeInternal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_initInternal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.ActionMethodDelegate ret = obj.initInternal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index initInternal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_uniqueId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			int ret = obj.uniqueId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uniqueId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			int ret = obj.id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_optional(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescrOptional ret = obj.optional;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index optional on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_toggle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.toggle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index toggle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useEstimatedTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useEstimatedTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useEstimatedTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useFrames(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useFrames = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useFrames on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useManualTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useManualTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useManualTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_usesNormalDt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.usesNormalDt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index usesNormalDt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasInitiliazed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasInitiliazed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasInitiliazed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasExtraOnCompletes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasExtraOnCompletes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasExtraOnCompletes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasPhysics(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasPhysics = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasPhysics on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteOnRepeat(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.onCompleteOnRepeat = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCompleteOnRepeat on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCompleteOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.onCompleteOnStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCompleteOnStart on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useRecursion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useRecursion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useRecursion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ratioPassed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ratioPassed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ratioPassed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_passed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.passed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index passed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_delay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.delay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index delay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index time on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lastVal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.lastVal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lastVal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loopCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.loopCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_counter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.counter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index counter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_direction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.direction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index direction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_directionLast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.directionLast = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index directionLast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_overshoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.overshoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index overshoot on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_period(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.period = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index period on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_scale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.scale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index scale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_destroyOnComplete(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.destroyOnComplete = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index destroyOnComplete on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_trans(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.trans = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index trans on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ltRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTRect arg0 = (LTRect)ToLua.CheckObject<LTRect>(L, 2);
			obj.ltRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ltRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			TweenAction arg0 = (TweenAction)ToLua.CheckObject(L, 2, typeof(TweenAction));
			obj.type = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loopType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LeanTweenType arg0 = (LeanTweenType)ToLua.CheckObject(L, 2, typeof(LeanTweenType));
			obj.loopType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loopType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hasUpdateCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.hasUpdateCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasUpdateCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_easeMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.EaseTypeDelegate arg0 = (LTDescr.EaseTypeDelegate)ToLua.CheckDelegate<LTDescr.EaseTypeDelegate>(L, 2);
			obj.easeMethod = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeMethod on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spriteRen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.SpriteRenderer arg0 = (UnityEngine.SpriteRenderer)ToLua.CheckObject(L, 2, typeof(UnityEngine.SpriteRenderer));
			obj.spriteRen = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteRen on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.rectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiText(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.CheckObject<UnityEngine.UI.Text>(L, 2);
			obj.uiText = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiText on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_uiImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckObject<UnityEngine.UI.Image>(L, 2);
			obj.uiImage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index uiImage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rawImage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.UI.RawImage arg0 = (UnityEngine.UI.RawImage)ToLua.CheckObject<UnityEngine.UI.RawImage>(L, 2);
			obj.rawImage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rawImage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sprites(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Sprite[] arg0 = ToLua.CheckObjectArray<UnityEngine.Sprite>(L, 2);
			obj.sprites = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sprites on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__optional(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescrOptional arg0 = (LTDescrOptional)ToLua.CheckObject<LTDescrOptional>(L, 2);
			obj._optional = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index _optional on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_val(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr.val = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dt(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			LTDescr.dt = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_newVect(IntPtr L)
	{
		try
		{
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			LTDescr.newVect = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_from(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.from = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index from on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_to(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.to = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index to on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_easeInternal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.ActionMethodDelegate arg0 = (LTDescr.ActionMethodDelegate)ToLua.CheckDelegate<LTDescr.ActionMethodDelegate>(L, 2);
			obj.easeInternal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easeInternal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_initInternal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescr.ActionMethodDelegate arg0 = (LTDescr.ActionMethodDelegate)ToLua.CheckDelegate<LTDescr.ActionMethodDelegate>(L, 2);
			obj.initInternal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index initInternal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_optional(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LTDescr obj = (LTDescr)o;
			LTDescrOptional arg0 = (LTDescrOptional)ToLua.CheckObject<LTDescrOptional>(L, 2);
			obj.optional = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index optional on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LTDescr_EaseTypeDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<LTDescr.EaseTypeDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<LTDescr.EaseTypeDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LTDescr_ActionMethodDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<LTDescr.ActionMethodDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<LTDescr.ActionMethodDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

